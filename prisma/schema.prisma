generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Adding required models for Auth.js OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String   @id @default(uuid())
  email         String?  @unique
  name          String?
  image         String?
  password      String?
  role          Role     @default(STUDENT)
  emailVerified Boolean? @default(false)

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  TestAnswer    TestAnswer[]
  Payment       Payment[]
  Subscription  Subscription[]
  VideoUserData VideoUserData[]
  FileUserData  FileUserData[]
  TestUserData  TestUserData[]

  sessions Session[]
  History  History[]

  products Product[]

  // Add relation to orders
  orders Order[]

  // Add relation to seller earnings
  sellerEarnings SellerEarning[]

  courses Course[]
  coupon  Coupon[]

  // Add relation to accounts for OAuth
  accounts Account[]
}

enum Gender {
  male
  female
}

enum CenterOrOnline {
  center
  online
}

enum Role {
  STUDENT
  CONSTRUCTOR
  ADMIN
}

model Session {
  id        String   @id @default(uuid())
  device_id String   @unique
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String    @id @default(uuid())
  title       String
  description String?
  price       Float?    @default(0)
  image       String?
  isPublished Boolean   @default(false)
  chapters    Chapter[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  Subscription Subscription[]
  Lesson       Lesson[]
  History      History[]

  User   User?    @relation(fields: [userId], references: [id])
  userId String?
  Coupon Coupon[]
}

model Chapter {
  id          String   @id @default(uuid())
  title       String
  isPublished Boolean  @default(false)
  position    Int?
  courseId    String
  Lesson      Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([position])
}

model Lesson {
  id          String      @id @default(uuid())
  title       String?
  description String?
  videoUrl    String?
  videoId     String?
  video_type  VideoTypes? @default(vimeo)
  upload_id   String?
  fileUrl     String?
  position    Int?
  isPublished Boolean     @default(false)
  type        Type?
  chapterId   String
  courseId    String
  isFree      Boolean     @default(false)

  // test data
  testQuestions             TestQuestion[]
  hours                     Int?           @default(0)
  minutes                   Int?           @default(0)
  number_of_entries_allowed Int?           @default(1)
  exam_allowed_from         String?
  exam_allowed_to           String?
  show_answers              Boolean?       @default(false)
  TestAnswer                TestAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  Course  Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  VideoUserData VideoUserData[]
  FileUserData  FileUserData[]
  TestUserData  TestUserData[]

  @@index([position])
}

enum VideoTypes {
  youtube
  vimeo
}

enum Type {
  video
  test
  file
  sheet
}

model TestQuestion {
  id            String    @id @default(uuid())
  question      String?
  image_url     String?
  answers       Answers[]
  currectAnswer Int
  index         Int
  lessonId      String

  explanation_text  String?
  explanation_image String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson         Lesson       @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  questionAnswer TestAnswer[]
}

model Answers {
  id             String       @id @default(uuid())
  testQuestionId String
  image_url      String?
  answer         String?
  index          Int?
  TestQuestion   TestQuestion @relation(fields: [testQuestionId], references: [id], onDelete: Cascade)
}

model TestUserData {
  id       String @id @default(uuid())
  userId   String
  lessonId String

  userShowAnswers Boolean @default(false)
  isCompleted     Boolean @default(false)

  testAnswers TestAnswer[]
  testResult  Int?
  testEndTime DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([testResult])
  @@index([userShowAnswers])
  @@index([isCompleted])
}

model VideoUserData {
  id       String @id @default(uuid())
  userId   String
  lessonId String

  isCompleted Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model FileUserData {
  id       String @id @default(uuid())
  userId   String
  lessonId String

  isCompleted Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model TestAnswer {
  id             String   @id @default(uuid())
  userId         String
  lessonId       String
  testQuestionId String
  answer         Int
  isCorrect      Boolean
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson         Lesson        @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  testQuestion   TestQuestion  @relation(fields: [testQuestionId], references: [id], onDelete: Cascade)
  TestUserData   TestUserData? @relation(fields: [testUserDataId], references: [id], onDelete: Cascade)
  testUserDataId String?
}

model Payment {
  id           String    @id @default(uuid())
  userId       String
  amount       String
  invoice_id   String
  invoice_ref  String
  expire_date  DateTime?
  payment_time DateTime?
  status       Status    @default(UNCREATED)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Status {
  UNPAID
  PAID
  UNCREATED
}

model Subscription {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  courseId  String
  userId    String
}

model PasswordResetToken {
  id      String   @id @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model History {
  id        String   @id @default(uuid())
  userId    String
  courseId  String?
  price     Int
  createdAt DateTime @default(now())

  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)
  Coupon   Coupon? @relation(fields: [couponId], references: [id])
  couponId String?
}

model Coupon {
  id            String       @id @default(uuid())
  code          String       @unique
  value         Float
  isUsed        Boolean      @default(false)
  email         String?
  courseId      String?
  productId     String?
  discountType  DiscountType @default(PERCENTAGE)
  maxUses       Int?         @default(1)
  usedCount     Int          @default(0)
  expiresAt     DateTime?
  createdAt     DateTime     @default(now())
  History       History[]
  constructorId String?
  constructor   User?        @relation(fields: [constructorId], references: [id])

  // Add explicit relations to Course and Product
  course  Course?  @relation(fields: [courseId], references: [id])
  product Product? @relation(fields: [productId], references: [id])

  @@index([code])
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  stock       Int      @default(0)
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation to order items
  orderItems OrderItem[]

  type   ProductType @default(HANDMADE)
  User   User?       @relation(fields: [userId], references: [id])
  userId String?
  Coupon Coupon[]

  @@index([isAvailable])
  @@index([price])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Float
  status      OrderStatus @default(PENDING)
  // Adding address and phone number fields
  address     String?
  phoneNumber String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems     OrderItem[]
  // Add relation to seller earnings
  sellerEarnings SellerEarning[]

  @@index([status])
  @@index([userId])
}

model OrderItem {
  id        String      @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  status    OrderStatus @default(PENDING) // Añadimos el estado individual para cada ítem

  // Relations
  order         Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  // Add relation to seller earnings
  sellerEarning SellerEarning?

  @@unique([orderId, productId])
  @@index([productId]) // Added index to improve query performance when looking for orders by product
  @@index([status]) // Añadimos índice para consultas por estado
}

// Nuevo modelo para los ingresos de los vendedores
model SellerEarning {
  id          String    @id @default(uuid())
  sellerId    String // ID del vendedor (usuario)
  orderItemId String    @unique // ID del item de orden asociado
  orderId     String // ID de la orden a la que pertenece
  amount      Float // Cantidad que recibe el vendedor
  isPaid      Boolean   @default(false) // Indica si el vendedor ya recibió el pago
  paidAt      DateTime? // Fecha en la que se le pagó al vendedor
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relaciones
  seller    User      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation(fields: [orderItemId], references: [id], onDelete: Restrict)
  order     Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([sellerId])
  @@index([orderId])
  @@index([isPaid])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}

enum ProductType {
  HANDMADE
  EQUIPMENT
}
